[
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "PlanoLux",
    "section": "",
    "text": "This is the basic class for 2D points.\nsource"
  },
  {
    "objectID": "core.html#vector-reflection",
    "href": "core.html#vector-reflection",
    "title": "PlanoLux",
    "section": "Vector Reflection",
    "text": "Vector Reflection\nFor an incoming ray \\(\\vec{s}\\) and a surface normal \\(\\vec{n}\\) the reflected ray \\(\\vec{v}_{reflect}\\)\n\\[ \\vec{v}_{reflect} = \\vec{s} - 2 (\\vec{s} \\cdot \\vec{n}) \\vec{n}\\]\n\nsource\n\nreflect\n\n reflect (R, S, P)\n\nThis checked reflections at various angles."
  },
  {
    "objectID": "core.html#vector-refraction-snells-law",
    "href": "core.html#vector-refraction-snells-law",
    "title": "PlanoLux",
    "section": "Vector refraction Snell’s Law",
    "text": "Vector refraction Snell’s Law\nFor an incoming ray \\(\\vec{s}\\) and a surface normal \\(\\vec{n}\\) the refracted ray \\(\\vec{v}_{refract}\\)\n\\[\\vec{v}_{refract} = r \\vec{s} + \\left( r c - \\sqrt{1-r^2 (1-c^2)} \\vec{n} \\right)\\]\nwhere \\(r = \\frac{n_1}{n_2}\\) and \\(c = -\\vec{n} \\cdot \\vec{s}\\).\n\nsource\n\nrefract\n\n refract (R, S, P)\n\n\nsource\n\n\nlens\n\n lens (R1, R2, T, H, XL, N=16)\n\nRay caster should start at sp, array of cast rays added to list with initial intensity.\nEvery ray is intersected with every surface. Closest surface (in direction of ray) is chosen as first intersect. Intersect position noted as new source point, reflected and refracted rays generated. Intensity of each decreased.\nRays removed with no intersections left or intensity too low."
  },
  {
    "objectID": "core.html#fresnel-equations",
    "href": "core.html#fresnel-equations",
    "title": "PlanoLux",
    "section": "Fresnel Equations",
    "text": "Fresnel Equations\n\nsource\n\nreflectance\n\n reflectance (r, sc)\n\nNow lets see all the reflect and refract work.\n\nsurf = []\nsurf.append(Surface(Point(4,2), Point(2,2), n2=1.5))\nsurf.append(Surface(Point(3,0), Point(4,2), n2=1.5))\nsurf.append(Surface(Point(2,2), Point(3,0), n2=1.5))\n\n\n# Source Point\nsp    = Point(0.0,1.0)\n\n# Initial Rays\nrays_out = gen_rays(sp, -10, 10, 5, endpoint=False)\n\n\nsource\n\n\nraytrace\n\n raytrace (rays_out, surf, reflect_rays=True, refract_rays=True, DEPTH=10,\n           RT=0.001, verbose=False)\n\n\nrays_all = raytrace(rays_out, surf)\nplot_scene(rays_all, surf, sp, raycol='red')"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "PlanoLux",
    "section": "",
    "text": "This file will become your README and also the index of your documentation."
  },
  {
    "objectID": "index.html#install",
    "href": "index.html#install",
    "title": "PlanoLux",
    "section": "Install",
    "text": "Install\npip install planolux"
  },
  {
    "objectID": "index.html#how-to-use",
    "href": "index.html#how-to-use",
    "title": "PlanoLux",
    "section": "How to use",
    "text": "How to use\nThis is an example of a prism. Figure 1\n\nsurf = []\nsurf.append(Surface(Point(4,2), Point(2,2), n2=1.5))\nsurf.append(Surface(Point(3,0), Point(4,2), n2=1.5))\nsurf.append(Surface(Point(2,2), Point(3,0), n2=1.5))\n\n# Source Point\nsp    = Point(0.0,1.0)\n\n# Initial Rays\nrays_out = gen_rays(sp, -10, 10, 5, endpoint=False)\n\nrays_all = raytrace(rays_out, surf)\n\nplot_scene(rays_all, surf, sp, raycol='red')\n\n\n\n\nFigure 1: A prizm\n\n\n\n\n\nW = 0.5\nsurf = []\nsurf.append(Surface(Point(W/2,-5), Point(W/2,1.0), n2=1.5))\nsurf.append(Surface(Point(-W/2,2), Point(-W/2,-5), n2=1.5))\n\nsurf.append(Surface(Point(W/2,1.0), Point(-W/2,2.0), n2=1.5))\n\n\n# Source Point\nsp    = Point(-4,-2)\n\n# Initial Rays\nrays_out = gen_rays(sp, 25, 55, 15, endpoint=False)\n\nrays_all = raytrace(rays_out, surf)\nplot_scene(rays_all, surf, sp, raycol='red')\n\n/Users/michaeljohnson/Dev/planolux/planolux/core.py:210: RuntimeWarning: invalid value encountered in sqrt\n  rs = ((n1*np.cos(ai) - n2*np.sqrt(1-(n1/n2*np.sin(ai))**2))/(n1*np.cos(ai) + n2*np.sqrt(1-(n1/n2*np.sin(ai))**2)))**2\n/Users/michaeljohnson/Dev/planolux/planolux/core.py:211: RuntimeWarning: invalid value encountered in sqrt\n  rp = ((-n2*np.cos(ai) + n1*np.sqrt(1-(n1/n2*np.sin(ai))**2))/(n2*np.cos(ai) + n1*np.sqrt(1-(n1/n2*np.sin(ai))**2)))**2\n/Users/michaeljohnson/Dev/planolux/planolux/core.py:167: RuntimeWarning: invalid value encountered in sqrt\n  f = r*c - np.sqrt(1-r**2*(1-c**2))\n\n\n\n\n\n\nsurf = []\nsurf.append(Surface(Point(1.0,-1.0), Point(-1.0,-1.0)))\nsurf.append(Surface(Point(-1.5,-1.5), Point(1.5,-1.5)))\n\n# surf.append(Surface(Point(1.0,1), Point(1.0,-1.0)))\n# surf.append(Surface(Point(1.5,-1.5), Point(1.5,1.5)))\n\n\nN = 16\nR1 = 3.0\nR2 = R1\nT  = 0.5\nH  = 0.75\n\n# 1/f = (n2-1)(1/R1+1/r2)-(n2-1)**2*d/(n2*R1*r2)\nn = surf[0].n2\nfin = (n-1)*(1/R1+1/R2)-((n-1)**2)*T/(n*R1*R2)\n\nXL = -1/fin\nprint(1/fin)\n#print(np.arcsin(surf[0].n1/surf[0].n2)*180.0/np.pi)\n#XL = -5\n\nsu = lens(R1, R2, T, H, XL, N=16)\nfor ss in su:\n    surf.append(ss)\n\n# Source Point\nsp    = Point(0.0,0.0)\n\n# Initial Rays\nrays_out = gen_rays(sp, -180, 180, 60, endpoint=False)\nrays_all = raytrace(rays_out, surf, reflect_rays=False)\nplot_scene(rays_all, surf, sp, raycol='red')\n\n3.085714285714286"
  }
]